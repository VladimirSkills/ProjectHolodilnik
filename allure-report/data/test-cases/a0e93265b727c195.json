{"uid":"a0e93265b727c195","name":"test_add_options_basket","fullName":"test_card_basket#test_add_options_basket","historyId":"f95cc6f2d516befc9293f774dd931a86","time":{"start":1662924531772,"stop":1662924539236,"duration":7464},"description":"Тестируем добавление дополнительных опций к товару в корзине / Страхование","descriptionHtml":"<p>Тестируем добавление дополнительных опций к товару в корзине / Страхование</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: chrome=105.0.5195.102)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x003878B3+2193587]\n\tOrdinal0 [0x00320681+1771137]\n\tOrdinal0 [0x002341A8+803240]\n\tOrdinal0 [0x00236BB4+814004]\n\tOrdinal0 [0x00236A72+813682]\n\tOrdinal0 [0x00236D00+814336]\n\tOrdinal0 [0x00263F19+999193]\n\tOrdinal0 [0x00259146+954694]\n\tOrdinal0 [0x0027D7AC+1103788]\n\tOrdinal0 [0x00258C04+953348]\n\tOrdinal0 [0x0027D9C4+1104324]\n\tOrdinal0 [0x0028DAE2+1170146]\n\tOrdinal0 [0x0027D5C6+1103302]\n\tOrdinal0 [0x002577E0+948192]\n\tOrdinal0 [0x002586E6+952038]\n\tGetHandleVerifier [0x00630CB2+2738370]\n\tGetHandleVerifier [0x006221B8+2678216]\n\tGetHandleVerifier [0x004117AA+512954]\n\tGetHandleVerifier [0x00410856+509030]\n\tOrdinal0 [0x0032743B+1799227]\n\tOrdinal0 [0x0032BB68+1817448]\n\tOrdinal0 [0x0032BC55+1817685]\n\tOrdinal0 [0x00335230+1856048]\n\tBaseThreadInitThunk [0x764EFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77C57A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77C57A6E+238]","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8bd33fc0f7dfaba925994c6659e113d4\")>\n\n    def test_add_options_basket(browser):\n        \"\"\"Тестируем добавление дополнительных опций к товару в корзине / Страхование\"\"\"\n        driver = browser\n        main_page = MainPage(driver)\n        page = ProductCardBasket(driver)\n        result_status = \"\"\n        try:\n            page.enter_on_site()\n            # Нажимаем на кнопку Каталог:\n            main_page.btn_click_catalog()\n            # Наводим мышь на элемент Смартфоны и гаджеты:\n            smartphones = main_page.find_elem_smartphones()\n            ActionChains(driver).move_to_element(smartphones).perform()  # наводим мышь\n            # Наводим мышь на элемент Смартфоны:\n            smartphonprod = main_page.find_elem_smartphonprod()\n            ActionChains(driver).move_to_element(smartphonprod).perform()  # наводим мышь\n            smartphonprod.click()\n            # Скроллим до первого элемента:\n            baskets = page.find_elem_baskets()\n            driver.execute_script(\"arguments[0].scrollIntoView();\", baskets)\n            # Добавляем первый товар в корзину:\n            page.find_elem_baskets().click()\n            driver.implicitly_wait(3)\n            # Нажимаем Перейти в корзину:\n            page.btn_click_inbasket2().click()\n            # Фиксируем итоговую цену:\n            totalprice1 = int(\"\".join(filter(str.isdigit, page.find_elem_totalprice().text)))\n            # Нажимаем на надпись Страхование техники:\n>           page.btn_click_insurance()\n\ntests\\test_card_basket.py:399: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\PageAutho.py:618: in btn_click_insurance\n    btn_insurance = self.find_element(LocatorsProject.PCB_bINSURANCE).click()\nverv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:88: in click\n    self._execute(Command.CLICK_ELEMENT)\nverv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:396: in _execute\n    return self._parent.execute(command, params)\nverv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:428: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F8BDDA5790>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C57A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C57A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: chrome=105.0.5195.102)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x003878B3+2193587]\nE       \tOrdinal0 [0x00320681+1771137]\nE       \tOrdinal0 [0x002341A8+803240]\nE       \tOrdinal0 [0x00236BB4+814004]\nE       \tOrdinal0 [0x00236A72+813682]\nE       \tOrdinal0 [0x00236D00+814336]\nE       \tOrdinal0 [0x00263F19+999193]\nE       \tOrdinal0 [0x00259146+954694]\nE       \tOrdinal0 [0x0027D7AC+1103788]\nE       \tOrdinal0 [0x00258C04+953348]\nE       \tOrdinal0 [0x0027D9C4+1104324]\nE       \tOrdinal0 [0x0028DAE2+1170146]\nE       \tOrdinal0 [0x0027D5C6+1103302]\nE       \tOrdinal0 [0x002577E0+948192]\nE       \tOrdinal0 [0x002586E6+952038]\nE       \tGetHandleVerifier [0x00630CB2+2738370]\nE       \tGetHandleVerifier [0x006221B8+2678216]\nE       \tGetHandleVerifier [0x004117AA+512954]\nE       \tGetHandleVerifier [0x00410856+509030]\nE       \tOrdinal0 [0x0032743B+1799227]\nE       \tOrdinal0 [0x0032BB68+1817448]\nE       \tOrdinal0 [0x0032BC55+1817685]\nE       \tOrdinal0 [0x00335230+1856048]\nE       \tBaseThreadInitThunk [0x764EFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C57A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C57A6E+238]\n\nverv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1662924527625,"stop":1662924527687,"duration":62},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"browser","time":{"start":1662924527687,"stop":1662924531772,"duration":4085},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1662924527687,"stop":1662924527687,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1662924527687,"stop":1662924527687,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"_skip_sensitive","time":{"start":1662924531772,"stop":1662924531772,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"sensitive_url","time":{"start":1662924531772,"stop":1662924531772,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"time_delta_teardown","time":{"start":1662924531772,"stop":1662924531772,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"testStage":{"description":"Тестируем добавление дополнительных опций к товару в корзине / Страхование","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: chrome=105.0.5195.102)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x003878B3+2193587]\n\tOrdinal0 [0x00320681+1771137]\n\tOrdinal0 [0x002341A8+803240]\n\tOrdinal0 [0x00236BB4+814004]\n\tOrdinal0 [0x00236A72+813682]\n\tOrdinal0 [0x00236D00+814336]\n\tOrdinal0 [0x00263F19+999193]\n\tOrdinal0 [0x00259146+954694]\n\tOrdinal0 [0x0027D7AC+1103788]\n\tOrdinal0 [0x00258C04+953348]\n\tOrdinal0 [0x0027D9C4+1104324]\n\tOrdinal0 [0x0028DAE2+1170146]\n\tOrdinal0 [0x0027D5C6+1103302]\n\tOrdinal0 [0x002577E0+948192]\n\tOrdinal0 [0x002586E6+952038]\n\tGetHandleVerifier [0x00630CB2+2738370]\n\tGetHandleVerifier [0x006221B8+2678216]\n\tGetHandleVerifier [0x004117AA+512954]\n\tGetHandleVerifier [0x00410856+509030]\n\tOrdinal0 [0x0032743B+1799227]\n\tOrdinal0 [0x0032BB68+1817448]\n\tOrdinal0 [0x0032BC55+1817685]\n\tOrdinal0 [0x00335230+1856048]\n\tBaseThreadInitThunk [0x764EFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77C57A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77C57A6E+238]","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8bd33fc0f7dfaba925994c6659e113d4\")>\n\n    def test_add_options_basket(browser):\n        \"\"\"Тестируем добавление дополнительных опций к товару в корзине / Страхование\"\"\"\n        driver = browser\n        main_page = MainPage(driver)\n        page = ProductCardBasket(driver)\n        result_status = \"\"\n        try:\n            page.enter_on_site()\n            # Нажимаем на кнопку Каталог:\n            main_page.btn_click_catalog()\n            # Наводим мышь на элемент Смартфоны и гаджеты:\n            smartphones = main_page.find_elem_smartphones()\n            ActionChains(driver).move_to_element(smartphones).perform()  # наводим мышь\n            # Наводим мышь на элемент Смартфоны:\n            smartphonprod = main_page.find_elem_smartphonprod()\n            ActionChains(driver).move_to_element(smartphonprod).perform()  # наводим мышь\n            smartphonprod.click()\n            # Скроллим до первого элемента:\n            baskets = page.find_elem_baskets()\n            driver.execute_script(\"arguments[0].scrollIntoView();\", baskets)\n            # Добавляем первый товар в корзину:\n            page.find_elem_baskets().click()\n            driver.implicitly_wait(3)\n            # Нажимаем Перейти в корзину:\n            page.btn_click_inbasket2().click()\n            # Фиксируем итоговую цену:\n            totalprice1 = int(\"\".join(filter(str.isdigit, page.find_elem_totalprice().text)))\n            # Нажимаем на надпись Страхование техники:\n>           page.btn_click_insurance()\n\ntests\\test_card_basket.py:399: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\PageAutho.py:618: in btn_click_insurance\n    btn_insurance = self.find_element(LocatorsProject.PCB_bINSURANCE).click()\nverv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:88: in click\n    self._execute(Command.CLICK_ELEMENT)\nverv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:396: in _execute\n    return self._parent.execute(command, params)\nverv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:428: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F8BDDA5790>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C57A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C57A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: chrome=105.0.5195.102)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x003878B3+2193587]\nE       \tOrdinal0 [0x00320681+1771137]\nE       \tOrdinal0 [0x002341A8+803240]\nE       \tOrdinal0 [0x00236BB4+814004]\nE       \tOrdinal0 [0x00236A72+813682]\nE       \tOrdinal0 [0x00236D00+814336]\nE       \tOrdinal0 [0x00263F19+999193]\nE       \tOrdinal0 [0x00259146+954694]\nE       \tOrdinal0 [0x0027D7AC+1103788]\nE       \tOrdinal0 [0x00258C04+953348]\nE       \tOrdinal0 [0x0027D9C4+1104324]\nE       \tOrdinal0 [0x0028DAE2+1170146]\nE       \tOrdinal0 [0x0027D5C6+1103302]\nE       \tOrdinal0 [0x002577E0+948192]\nE       \tOrdinal0 [0x002586E6+952038]\nE       \tGetHandleVerifier [0x00630CB2+2738370]\nE       \tGetHandleVerifier [0x006221B8+2678216]\nE       \tGetHandleVerifier [0x004117AA+512954]\nE       \tGetHandleVerifier [0x00410856+509030]\nE       \tOrdinal0 [0x0032743B+1799227]\nE       \tOrdinal0 [0x0032BB68+1817448]\nE       \tOrdinal0 [0x0032BC55+1817685]\nE       \tOrdinal0 [0x00335230+1856048]\nE       \tBaseThreadInitThunk [0x764EFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C57A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C57A6E+238]\n\nverv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: StaleElementReferenceException","steps":[],"attachments":[{"uid":"59d19229d674aa84","name":"log","source":"59d19229d674aa84.txt","type":"text/plain","size":1517},{"uid":"59d3752ee76136d5","name":"stdout","source":"59d3752ee76136d5.txt","type":"text/plain","size":100}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":2,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"time_delta_teardown::0","time":{"start":1662924539368,"stop":1662924539368,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"browser::0","time":{"start":1662924539369,"stop":1662924557678,"duration":18309},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"labels":[{"name":"suite","value":"test_card_basket"},{"name":"host","value":"HOME"},{"name":"thread","value":"9276-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_card_basket"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"a0e93265b727c195.json","parameterValues":[]}